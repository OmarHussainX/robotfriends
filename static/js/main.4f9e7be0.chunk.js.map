{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scrollable.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","name","email","id","react_default","a","createElement","className","src","concat","alt","Component","CardList","cardsArray","robots","map","robot","src_components_Card","key","SearchBox","type","placeholder","onChange","onSearchInput","Scrollable","style","overflowY","height","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","persist","setState","searchTerm","target","value","console","log","state","_this2","fetch","then","response","json","users","_this3","filteredBots","filter","toLowerCase","includes","length","components_SearchBox","components_Scrollable","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAkBeA,gMAdF,IAAAC,EACuBC,KAAKC,MAAzBC,EADHH,EACGG,KAAMC,EADTJ,EACSI,MAAOC,EADhBL,EACgBK,GACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,0BAAsDO,IAAI,cAClEN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,YARLS,cCyBJC,mLAxBF,IAOCC,EALad,KAAKC,MAAhBc,OAKkBC,IAAI,SAACC,GAC3B,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CAAMd,GAAIa,EAAMb,GAChBF,KAAMe,EAAMf,KACZC,MAAOc,EAAMd,MACbgB,IAAKF,EAAMb,OAInB,OACIC,EAAAC,EAAAC,cAAA,WACKO,UAnBMF,aCaRQ,mLAZP,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACAC,UAAU,MACVa,KAAK,SACLC,YAAY,SACZC,SAAUvB,KAAKC,MAAMuB,wBARbZ,aCUTa,mLARP,OACIpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrC5B,KAAKC,MAAM4B,iBAJHjB,aCyDVkB,cAlDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhC,KAAA8B,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApC,QAUJwB,cAAgB,SAAAa,GAKZA,EAAMC,UAENP,EAAKQ,SAAS,CAACC,WAAYH,EAAMI,OAAOC,QACxCC,QAAQC,IAAIP,EAAMI,OAAOC,QAjBzBX,EAAKc,MAAQ,CAET9B,OAAQ,GACRyB,WAAY,IALNT,mFAsBM,IAAAe,EAAA9C,KAChB+C,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAACxB,OAAQoC,uCAGjC,IAAAC,EAAApD,KACCqD,EAAerD,KAAK6C,MAAM9B,OAAOuC,OAAO,SAAArC,GAC1C,OAAOA,EAAMf,KAAKqD,cAAcC,SAASJ,EAAKP,MAAML,WAAWe,iBAInE,OAFAZ,QAAQC,IAAIS,GAEqB,IAA7BrD,KAAK6C,MAAM9B,OAAO0C,OAEdpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWlC,cAAexB,KAAKwB,gBAC/BnB,EAAAC,EAAAC,cAACoD,EAAD,KACItD,EAAAC,EAAAC,cAACqD,EAAD,CAAU7C,OAAQsC,MAKvBhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,qBA9CDI,mBCIEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.4f9e7be0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n    render() {\n        const { name, email, id } = this.props;\n        return (\n            <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img src={`https://robohash.org/${id}?set=set3;size=200x200`} alt='robot pic' />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Card';\n\nclass CardList extends Component {\n    render() {\n        // destructure 'this.props' object to get the 'robots' parameter that was passed in (note: 'robots' is an Array of Objects!)\n        const { robots } = this.props;\n        \n        // create an array of <Card /> components, with the appropriate arguments \n        // (add \"key\" attribute to each <Card /> child since Each child in a list should have a unique \"key\" prop)\n        // https://reactjs.org/docs/lists-and-keys.html#keys\n        const cardsArray = robots.map((robot) => {\n            return (\n                <Card id={robot.id} \n                name={robot.name} \n                email={robot.email} \n                key={robot.id} />);\n            }\n        );\n\n        return (\n            <div>\n                {cardsArray}\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n    render() {\n        return (\n            <div>\n                <input \n                className='pa1' \n                type='search' \n                placeholder='search' \n                onChange={this.props.onSearchInput} />\n            </div>\n        );\n    }\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass Scrollable extends Component {\n    render() {\n        return (\n            <div style={{overflowY: 'scroll', height: '600px'}}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Scrollable;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scrollable from '../components/Scrollable';\n// import { robots } from './robots';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            //why isn't this '{robots}'?\n            robots: [],\n            searchTerm: ''\n        }\n    }\n\n    //This MUST be an arrow function - see:\n    // https://reactjs.org/docs/handling-events.html\n    onSearchInput = event => {\n        //why is this needed?\n        //https://medium.com/@ian.mundy/async-event-handlers-in-react-a1590ed24399\n        //without it, get error, and event.target is null:\n        //This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the property `target` on a released/nullified synthetic event. This is set to null. If you must keep the original synthetic event around, use event.persist()\n        event.persist();\n\n        this.setState({searchTerm: event.target.value})\n        console.log(event.target.value);\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}));\n    }\n\n    render() {\n        const filteredBots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchTerm.toLowerCase())\n        });\n        console.log(filteredBots);\n\n        if (this.state.robots.length !== 0) {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>Robot Friends</h1>\n                    <SearchBox onSearchInput={this.onSearchInput} />\n                    <Scrollable>\n                        <CardList robots={filteredBots} />\n                    </Scrollable>\n                </div>\n            );\n        } else {\n            return <h1 className='f1'>Loading...</h1>\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}